import com.amazonaws.services.s3.model.ObjectMetadata
import jp.classmethod.aws.gradle.lambda.S3File
import jp.classmethod.aws.gradle.lambda.AWSLambdaUpdateFunctionCodeTask
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'base'
apply plugin: 'jp.classmethod.aws'
apply plugin: 'jp.classmethod.aws.s3'
apply plugin: "jp.classmethod.aws.lambda"

group = 'com.glennbech'
version = '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
    }
}

lambda {
    region = "eu-central-1"
}

aws {
    profileName = "default"
    region = "eu-central-1"
}

task uploadContent(type: AmazonS3FileUploadTask, dependsOn: shadowJar) {
    file file("build/libs/astroforecast-lambda-1.0-SNAPSHOT-all.jar")
    bucketName 'glennbech-lambda-deployments'
    key "astroforecast-lambda-1.0-SNAPSHOT-all.jar"

    def m = new ObjectMetadata()
    m.setCacheControl("no-cache, no-store")
    objectMetadata = m
}

task updateLambdaCode(type: AWSLambdaUpdateFunctionCodeTask, dependsOn: shadowJar) {
    functionName 'astronomyforecast'
    def file = new S3File()
    file.bucketName = 'glennbech-lambda-deployments'
    file.key= 'astroforecast-lambda-1.0-SNAPSHOT-all.jar'
    s3File = file
}

repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    compile group: 'org.simpleframework', name: 'simple-xml', version: '2.7.1'
    compile group: 'com.luckycatlabs', name: 'SunriseSunsetCalculator', version: '1.2'
    compile group: 'com.ocpsoft', name: 'ocpsoft-pretty-time', version: '1.0.7'
}
